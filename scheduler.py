# scheduler.py
import datetime
from aiogram import Bot
from sqlalchemy.orm import Session
from db import get_db, MasterClass
from aiogram_tasks import Task

async def open_registrations_task(bot: Bot):
    """–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –≤—Å–µ –ú–ö."""
    db: Session = next(get_db())
    master_classes = db.query(MasterClass).filter(MasterClass.is_open == False).all()
    
    for mc in master_classes:
        mc.is_open = True
        db.commit()
    
    if master_classes:
        # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        from config import ADMINS
        for admin_id in ADMINS:
            try:
                await bot.send_message(admin_id, "üì¢ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –æ—Ç–∫—Ä—ã—Ç–∞!")
            except Exception as e:
                print(f"Failed to send message to admin {admin_id}: {e}")

async def create_tasks(bot: Bot):
    """–°–æ–∑–¥–∞–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    Task(
        open_registrations_task,
        cron='0 10 * * *', # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
        bot=bot
    )
